#!/bin/bash -e
# This script provides two modes:
# 1. Locally: Download a pre-built package from Jenkins, sign it and upload to pso or llso
# 2. Remote: Remotely sign pre-built package from Jenkins and upload to pso or llso
#
# NOTE: for the second mode, this requires ssh access to $JENKINS_HOST, and a file .dput.cf in
# your home directory on $JENKINS_HOST with the following content:
# [llso]
# method   = rsync
# fqdn     = linux.lsdev.sil.org
# login    = <yourusername>
# incoming = /var/tmp/reprepro/incoming/%(llso)s
# [pso]
# method   = rsync
# fqdn     = packager.lsdev.sil.org
# login    = upload
# incoming = %(pso)s
#
# Also, to set up make sure that you ssh into $JENKINS_HOST and run:
# gpg --recv-keys $DEBSIGNKEY
#
# This step is optional, but removes a warning: set your gpg key to ultimate trust:
# gpg --edit-key $DEBSIGNKEY
# At the gpg> prompt, type trust, then type 5 for ultimate trust, then y to confirm, then quit.
#
# ssh <yourusername>@linux.lsdev.sil.org
#
# In order to be able to upload to pso your public key from $JENKINS_HOST has to be added to
# ~upload/.ssh/authorized_keys with permissions matching the other lines.
#
# ssh upload@packager.lsdev.sil.org

PROGRAM_NAME="$(basename "$0")"
WHERE=$(pwd)
SOURCEDIST=xenial
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# shellcheck disable=SC1090
. "$(dirname "$0")/${PROGRAM_NAME}.config"

err() {
	echo -e "${RED}$1${NC}"
}

log() {
	echo -e "${GREEN}$1${NC}"
}

if [ -z "$JENKINS_USER" ] || [ -z "$JENKINS_APITOKEN" ] || [ -z "$JENKINS_HOST" ]; then
	err "Please set JENKINS_USER, JENKINS_APITOKEN, and JENKINS_HOST variables in"
	err "$PROGRAM_NAME.config"
	exit 1
fi

if [ -z "$DEBSIGNKEY" ]; then
	err "DEBSIGNKEY not set. Exiting."
	exit 1
fi

NOOP=
DESTINATION=-experimental
REPO=llso
BUILD=lastSuccessfulBuild

help()
{
	log "Usage:"
	log "$(basename "$0") [-n|-nn] [--component <experimental|main>] [--repo <llso|pso>]"
	log "    [--build <buildno>] <project>"
	log ""
	log "-n "
	log "    Run script without doing anything"
	log "-nn "
	log "    Run script without doing anything and print commands"
	log ""
	log "--component <experimental|proposed|main>"
	log "    Where the package should go: experimental, proposed or main section."
	log "    Default: experimental"
	log ""
	log "--repo <llso|pso>"
	log "    Repo to upload to. Default: llso"
	log ""
	log "--build <buildno>"
	log "    Build number/string where the archifacts can be found"
	log ""
	log "--remote|--local"
	log "    Mode to run in. Determines whether to completely download packages"
	log "    before signing or leaving them on the server."
	log "    Default: --local"
	log ""
	log "--keep"
	log "    Don't delete temporary directory after uploading packages"
	Log ""
	log "--repack"
	log "    Repack packages for Ubuntu >= 21.10 to remove compression method not"
	log "    supported on pso (only supported with --local)"
	log ""
	log "<project>"
	log "    One of bloom, bloom-master, geckofx29, gtk-sharp, gtk-sharp-4,"
	log "    gtk-sharp-3.4, keyman, lfmerge-fdo, lfmerge, lfmerge-qa,"
	log "    lfmerge-master, libgdiplus, libgdiplus-4, libgdiplus-3.4, "
	log "    mono, mono-4, mono-3.4, monobasic, monobasic-4, monobasic-3.4,"
	log "    wesay, wesay-beta, wesay-alpha"
	log ""
	log ""
	log "Example:"
	log "$0 --repo pso \\ "
	log "    --component experimental --build 324 bloom"
	exit 0
}

# Process arguments.
while (( $# )); do
	case $1 in
		# Process individual arguments here. Use shift and $1 to get an argument value.
		-n)  NOOP=: ;;
		-nn) NOOP="echo" ;;
		--component)
			if [ "$2" == "experimental" ]; then
				DESTINATION=-experimental
			elif [ "$2" == "proposed" ]; then
				DESTINATION=-proposed
			elif [ "$2" == "main" ]; then
				DESTINATION=
			else
				err "Error: Unknown component \"$2\". Exiting"
				help
				exit 2
			fi
			shift
			;;
		--repo) REPO=$2; shift;;
		--help) help;;
		--build) BUILD=$2; shift;;
		--remote) REMOTE=1;;
		--local) ;;
		--keep) KEEP=1;;
		--repack) REPACK=1;;
		*)
			if [ $# -eq 1 ]; then
				break
			else
				err "Error: Unexpected argument \"$1\". Exiting."
				help
				exit 1
			fi
			;;
	esac
	shift
done

if [ $# -eq 0 ]; then
	err "Error: No project specified. Exiting."
	help
	exit 3
fi

PROJECT=$1

case $PROJECT in
	Bloom|bloom)
		JENKINS_JOB=Bloom_Packaging-Linux-all-4.0-release
		;;
	Bloom-master|bloom-master)
		JENKINS_JOB=Bloom_Packaging-Linux-all-master-release
		;;
	geckofx29)
		JENKINS_JOB=Geckofx29_NightlyPackaging-Linux-all-master-debug
		;;
	lfmerge-fdo)
		JENKINS_JOB=LfMergeFDO_Packaging-Linux-all-lfmerge-release
		;;
	gtk-sharp)
		JENKINS_JOB=Gtksharp_Packaging-Linux-all-develop-debug
		;;
	gtk-sharp-4)
		JENKINS_JOB=Gtksharp_Packaging-Linux-all-release_mono4_sil-debug
		;;
	gtk-sharp-3.4)
		JENKINS_JOB=Gtksharp_Packaging-Linux-all-release_mono_sil_3.4-debug
		;;
	keyman)
		JENKINS_JOB=pipeline-keyman-packaging/job/stable-15.0
		# ssh doesn't like '.' in paths when using wildcards, so replacing with '?'
		# shellcheck disable=SC2125
		JENKINS_REMOTE_JOB=pipeline-keyman-packaging/branches/stable-15?0*
		IS_PIPELINE=1
		;;
	lfmerge-master)
		JENKINS_JOB=LfMerge_Packaging-Linux-all-master-release
		BINARY_DIR=archive/finalresults
		;;
	lfmerge-qa)
		JENKINS_JOB=LfMerge_Packaging-Linux-all-qa-release
		BINARY_DIR=archive/finalresults
		;;
	lfmerge)
		JENKINS_JOB=LfMerge_Packaging-Linux-all-live-release
		BINARY_DIR=archive/finalresults
		;;
	libgdiplus)
		JENKINS_JOB=Libgdiplus_Packaging-Linux-all-develop-debug
		;;
	libgdiplus-4)
		JENKINS_JOB=Libgdiplus_Packaging-Linux-all-release_mono4_sil-debug
		;;
	libgdiplus-3.4)
		JENKINS_JOB=Libgdiplus_Packaging-Linux-all-release_mono_sil_3.4-debug
		;;
	mono)
		JENKINS_JOB=Mono_Packaging-Linux-all-develop-debug
		;;
	mono-4)
		JENKINS_JOB=Mono_Packaging-Linux-all-release_mono4_sil-debug
		;;
	mono-3.4)
		JENKINS_JOB=Mono_Packaging-Linux-all-release_mono_sil_3.4-debug
		;;
	monobasic)
		JENKINS_JOB=Monobasic_Packaging-Linux-all-develop-debug
		;;
	monobasic-4)
		JENKINS_JOB=Monobasic_Packaging-Linux-all-release_mono4_sil-debug
		;;
	monobasic-3.4)
		JENKINS_JOB=Monobasic_Packaging-Linux-all-release_mono_sil_3.4-debug
		;;
	wesay)
		JENKINS_JOB=WeSay_Packaging-Linux-all-release_1.6-stable
		;;
	wesay-beta)
		JENKINS_JOB=WeSay_Packaging-Linux-all-master-beta
		;;
	wesay-alpha)
		JENKINS_JOB=WeSay_Packaging-Linux-all-develop-alpha
		;;
	*)
		err "Unknown project $PROJECT. Exiting."
		exit 4
esac

BINARY_DIR=${BINARY_DIR-archive/results}
SOURCE_DIR=${SOURCE_DIR-$BINARY_DIR}

# repack .deb files for impish+ so that they can be uploaded to pso
# Impish/Jammy use zstd compression which isn't available on pso
# Requires changestool from reprepro
repack_deb() {
	ar x "$1"
	mv "$1"{,.bak}
	unzstd control.tar.zst
	unzstd data.tar.zst
	rm control.tar.zst
	rm data.tar.zst
	xz control.tar
	xz data.tar
	ar r "$1" debian-binary control.tar.xz data.tar.xz
	rm ./*
}

repack() {
	# extract distros that we have packages for
	declare -A dists
	for f in *.deb; do
		[[ "$f" =~ \+([a-z]+) ]] && dists[${BASH_REMATCH[1]}]=0
	done

	for distro in "${!dists[@]}"; do
		if (( $(ubuntu-distro-info --series=$distro -r|cut -d'.' -f1) >= 21 )); then
			log "Repacking packages for $distro"
			mkdir -p tmp
			cd tmp

			for f in ../*"$distro"*deb; do
				log "Processing $f"
				repack_deb "$f"
			done
			cd ..
			rm -rf tmp

			for changesfile in *+"${distro}"*.changes; do
				# shellcheck disable=SC2001
				distro=$(sed 's/^.*+\([a-z]*\)[0-9]*_\(amd64\|i386\).changes$/\1/' <<< "$changesfile")
				changestool "$changesfile" updatechecksums
			done
		fi
	done
}

runLocal()
{
	TMPDIR=/tmp/$PROJECT-package
	rm -rf "$TMPDIR"
	mkdir -p "$TMPDIR"
	cd "$TMPDIR"

	wget --auth-no-challenge --http-user="${JENKINS_USER}" --http-password="${JENKINS_APITOKEN}" --secure-protocol=TLSv1 \
		"https://jenkins.lsdev.sil.org/view/Packaging/job/${JENKINS_JOB}/${BUILD}/artifact/*zip*/archive.zip"

	unzip archive.zip

	if [ "${SOURCE_DIR}" = "${BINARY_DIR}" ]; then
		# Source package is part of binary package
		PackagesToUpload="source and binary"
	else
		cd "$TMPDIR/$SOURCE_DIR"
		# Source package
		[ -n "$REPACK" ] && repack
		log "Signing and uploading source package"
		$NOOP debsign --re-sign "$DEBSIGNKEY" "*_source.changes"
		$NOOP dput -U "$REPO":ubuntu/${SOURCEDIST}"$DESTINATION" "*_source.changes"
		PackagesToUpload="binary"
	fi

	# binary packages
	cd "$TMPDIR/$BINARY_DIR"
	[ -n "$REPACK" ] && repack
	log "Signing and uploading binary packages"
	for changesfile in *+*.changes; do
		# shellcheck disable=SC2001
		distro=$(sed 's/^.*+\([a-z]*\)[0-9]*_\(amd64\|i386\).changes$/\1/' <<< "$changesfile")
		$NOOP debsign --re-sign "$DEBSIGNKEY" "$changesfile"
		$NOOP dput "$REPO":ubuntu/"$distro""$DESTINATION" "$changesfile"
	done

	cd "$WHERE"

	if [ -n "$KEEP" ]; then
		rm -rf "$TMPDIR"
	fi
}

runRemote()
{
	# Copy package to temp directory on the server where we have write permission
	log "Copy package to temporary directory"
	TMP_PACKAGE_DIR=$(mktemp -d tmp-package.XXXXXX)
	if [ -z ${IS_PIPELINE} ]; then
		$NOOP ssh -T "$JENKINS_HOST" >/dev/null << EOF
mkdir -p "${TMP_PACKAGE_DIR}"
rm -rf "${TMP_PACKAGE_DIR}"/*
cp -a ~jenkins/jobs/${JENKINS_JOB}/builds/${BUILD}/archive "${TMP_PACKAGE_DIR}"/
EOF
	else
		# Pipeline jobs are slightly different
		if [ "${BUILD}" == "lastSuccessfulBuild" ]; then
			BUILD=$($NOOP ssh -T "$JENKINS_HOST" grep lastSuccessfulBuild ~jenkins/jobs/"${JENKINS_REMOTE_JOB}"/builds/permalinks | cut -f 2 -d' ')
		fi
		$NOOP ssh -T "$JENKINS_HOST" >/dev/null << EOF
mkdir -p "${TMP_PACKAGE_DIR}"
rm -rf "${TMP_PACKAGE_DIR}"/*
cp -a ~jenkins/jobs/"${JENKINS_REMOTE_JOB}"/builds/${BUILD}/archive "${TMP_PACKAGE_DIR}"/
EOF
	fi

	if [ "${SOURCE_DIR}" = "${BINARY_DIR}" ]; then
		# Source package is part of binary package
		PackagesToUpload="source and binary"
	else
		# Source package
		log "Signing source package"
		$NOOP debsign --re-sign "$DEBSIGNKEY" -r "$JENKINS_HOST" "${TMP_PACKAGE_DIR}"/"${SOURCE_DIR}"/*_source.changes
		log "Uploading source package"
		$NOOP ssh "$JENKINS_HOST" dput -U "$REPO":ubuntu/${SOURCEDIST}"${DESTINATION}" "${TMP_PACKAGE_DIR}"/"${SOURCE_DIR}"/*_source.changes
		PackagesToUpload="binary"
	fi

	# binary packages
	log ""
	log "Signing ${PackagesToUpload} packages"

	$NOOP debsign --re-sign "$DEBSIGNKEY" -r "$JENKINS_HOST" "${TMP_PACKAGE_DIR}"/${BINARY_DIR}/*+*.changes

	log "Uploading ${PackagesToUpload} packages"
	$NOOP ssh -T "$JENKINS_HOST" >/dev/null << EOF
for changesfile in "${TMP_PACKAGE_DIR}"/${BINARY_DIR}/*+*.changes; do
	distro=\$(sed 's/^.*+\([a-z]*\)[0-9]*_\(amd64\|i386\).changes$/\1/' <<< "\$changesfile")
	dput "$REPO":ubuntu/"\$distro""$DESTINATION" "\$changesfile"
done
rm -rf "$TMP_PACKAGE_DIR"
EOF

	if [ -n "$KEEP" ]; then
		rm -rf "$TMP_PACKAGE_DIR"
	fi
}

if [ -n "$REMOTE" ]; then
	runRemote
else
	runLocal
fi
